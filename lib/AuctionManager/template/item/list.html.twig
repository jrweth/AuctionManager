{% extends "layout.html.twig" %}

{% block content %}
    <table id="itemList">
        <thead></thead>
        <tbody></tbody>
        <tfoot></tfoot>
    </table>

    <div id="itemEdit" style="display: none"></div>
    
<!-- Templates -->
<script type="text/template" id="amDataTableRow">
    <td>
        <button class="amEdit">edit</button>
        <button class="amDelete" onclick="return confirm('Are you sure you want to delete this record?')">delete</button>
    </td>
    <% for (fieldName in fields) { switch(fields[fieldName].listDisplay) {
            case 'none': break;
            case 'lookup':
                if (lookupModel = app[fields[fieldName].lookupCollection].get(data[fieldName])) { %>
                   <td><%= lookupModel.toString() %></td>
                <% } else { %>
                    <td>&#160; <%= data[fieldName] %></td>
                <% } break;
            case 'link': %>
                <td><a href="<%= data[fieldName] %>"><%= data[fieldName] %></a></td>
            <%
                break;
            case 'text':
            case undefined:
            default: %>
                <td><%= data[fieldName] %></td>
            
    <% }} %>
</script>


<script type="text/template" id="amDataTableHeader">
    <td><button class="amAddNew">add new</button></td>
    <% for (fieldName in fields) { if (fields[fieldName].listDisplay != 'none') { %> 
        <th><%= fields[fieldName].label %></th>
    <% }} %>
</script>


<script type="text/template" id="amDropDownOption">
    <option value="<%- value %>" <% if (selected == value) { %> selected="selected" <% } %> ><%- display %></option>
</script>  


<script type="text/template" id="amEdit">
    <div class="amEditFields"><form>
    <% for (fieldName in fields) { %>
        <div class="amEditField">
            <% switch(fields[fieldName].editDisplay) {
                case 'none': break;
                case 'dropdown':  %>
                    <label><%= fields[fieldName].label %></label>
                    <select name="<%= fieldName %>"></select>
                    <% break;
                case 'textarea': %>
                    <label><%= fields[fieldName].label %></label>
                    <textarea name="<%= fieldName %>"><%= data[fieldName] %></textarea>
                    <% break
                case 'link':
                case 'text':
                case undefined: 
                default: %>
                    <label><%= fields[fieldName].label %></label>
                    <input name="<%= fieldName %>" value="<%= data[fieldName] %>" />
            <% } %>
        </div>
    <% } %>
    </form>
    <button class="amSave">Save</button>
    <button class="amCancel">Cancel</button>
    </div>
</script>


{% endblock %}


{% block customJS %}
  <script type="text/javascript">
    'use strict';
    
    $.fn.serializeObject = function()
    {
        var o = {};
        var a = this.serializeArray();
        $.each(a, function() {
            if (o[this.name] !== undefined) {
                if (!o[this.name].push) {
                    o[this.name] = [o[this.name]];
                }
                o[this.name].push(this.value || '');
            } else {
                o[this.name] = this.value || '';
            }
        });
        return o;
    };
    var app = {}; // create namespace for our app

    //--------------
    // Models
    //--------------
    app.Category = Backbone.Model.extend({
      urlRoot: '{{ webRoot }}api/category',
      defaults: {
        name: '',
        auction_group_id: {{ auctionGroupId }}
      },
      initialize: function() {
          this.toString = function() {
              return this.attributes.name;
          }
      }
    });

    app.Item = Backbone.Model.extend({
        urlRoot: '{{ webRoot }}api/item',
        defaults: {
            auction_id: {{ auctionId }}
        },
        fields: {
            id: {type: 'primaryId', label: 'id', listDisplay: 'none', editDisplay: 'none'},
            auction_id: {type: 'lookupId', label: 'Auction', listDisplay: 'none', editDisplay: 'none'},
            title: {type: 'string', label: 'Title'},
            donor_display_name: {type: 'string', label: 'Donor Display Name'},
            description: {type: 'string', label: 'Description', editDisplay: 'textarea'},
            category_id: {type: 'lookupId', label: 'Category', listDisplay: 'lookup', editDisplay: 'dropdown', lookupCollection: 'categoryCollection'},
            value: {type: 'integer', label: 'Value'},
            min_bid: {type: 'integer', label: 'Min Bid', listDisplay: 'text'},
            notes: {type: 'string', label: 'Notes', editDisplay: 'textarea'},
            additional_information: {type: 'string', label: 'Additional Information', editDisplay: 'textarea'},
            image_url: {type: 'string', label: 'Image URL', listDisplay: 'link'}
        },
        getFields : function() {
            return this.fields;
        }
    });
    
    //--------------
    // Collections
    //--------------
    app.CategoryCollection = Backbone.Collection.extend({
      model: app.Category,
      url: '{{ webRoot }}api/category'
    });

    app.ItemCollection = Backbone.Collection.extend({
        model: app.Item,
        url: '{{ webRoot }}api/item'
    });
    
    //--------------
    // Views
    //--------------
    
    app.CategoryDropDownView = Backbone.View.extend({
        template: _.template($('#amDropDownOption').html()),
        initialize: function() {
            app.categoryCollection.on('add', this.addOne, this);
            app.categoryCollection.on('reset', this.addAll, this);
            app.categoryCollection.fetch(); // Loads list from local storage
            this.render();
        },
        render: function() {
            app.categoryCollection.fetch(); // Loads list from local storage
            this.addAll();
        },
        addOne: function(category){
            var option = this.template({value: category.get('id'), display: category.get('name'), selected: this.options.selected });
            this.$el.append(option);
        },
        addAll: function(){
            this.$el.html('<option value="">Select a Category...</option>'); // clean the todo list
            app.categoryCollection.each(this.addOne, this);
        },
    });

    app.ItemView = Backbone.View.extend({
        tagName: 'tr',
        template: _.template($('#amDataTableRow').html()),
        initialize: function(){
            this.model.on('change', this.render, this);
            this.model.on('destroy', this.remove, this); // remove: Convenience Backbone's function for removing the view from the DOM.
        },
        events: {
          'click .amEdit' : 'edit',
          'click .amDelete' : 'delete'
        },
        render: function() {
            this.$el.html(this.template({fields: this.model.getFields(), data: this.model.toJSON()}));
            return this;
        },
        edit: function () {
            var itemEditView = new app.ItemEditView({model: this.model});
        },
        delete: function() {
            console.log('deleting');
            this.model.destroy({wait: true, error: function(response) {alert('There was an error deleted the item');}});
        }
    });

    app.ItemListView = Backbone.View.extend({
        el: '#itemList',
        initialize: function() {
            var headerTemplate = _.template($('#amDataTableHeader').html());
            this.$el.children('thead').append(headerTemplate({fields: app.Item.prototype.getFields()}));

            app.itemCollection.on('add', this.addAll, this);
            app.itemCollection.on('reset', this.addAll, this);
            app.categoryCollection.fetch(); //Load for lookup for category
            app.itemCollection.fetch(); // Loads list from local storage
            
        },
        events: {
            'click .amAddNew' : 'addNew'
        },
        addNew: function() {
            var itemModel = new app.Item();
            app.itemEditView = new app.ItemEditView({model: itemModel});
        },
        addOne: function(item) {
            var view = new app.ItemView({model: item});
            this.$el.children('tbody').append(view.render().el);
        },
        addAll: function() {
            this.$el.children('tbody').html(''); // clean the list
            app.itemCollection.each(this.addOne, this);
        },
    });

    app.ItemEditView = Backbone.View.extend({
        el: '#itemEdit',
        initialize: function() {
            var editTemplate = _.template($('#amEdit').html());
            this.$el.html('');
            this.$el.append(editTemplate({fields: app.Item.prototype.getFields(), data: this.model.toJSON()}));
            this.$el.find('select').append('<option>first option</option>');
            var newView = new app.CategoryDropDownView({el: '#itemEdit select', selected: this.model.get('category_id')});
            this.$el.show();
            $('#itemList').hide();
            _.bindAll(this, "saveSuccess");
        },
        events: {
            'click .amSave' : 'save',
            'click .amCancel' : 'cancel'
        },
        save: function () {
            this.model.save(this.$el.find('form').serializeObject(), {
                wait: true,
                error: function(model, error){ alert(error.responseText);},
                success: this.saveSuccess
            });
        },
        saveSuccess: function(model, response) {
            this.$el.hide();
            this.undelegateEvents();
            app.itemCollection.add(model);
            $('#itemList').show();
        },
        cancel: function() {
            this.$el.hide();
            $('#itemList').show();
        }
    });

    
    // setup the collections
    app.categoryCollection = new app.CategoryCollection();
    app.itemCollection = new app.ItemCollection();

    // initialize the list
    app.itemListView = new app.ItemListView();
    
  </script>
{% endblock %}