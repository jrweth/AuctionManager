{% extends "layout.html.twig" %}

{% block content %}

  <style type="text/css">
    #categoryapp ul {
      list-style-type: none; /* Hides bullet points from category list */
    }

    #category-list .editMode {
      display: none; /* Hides input box*/
    }
    #category-list .editing .viewMode {
      display: none; /* Hides label text when .editing*/
    }    
    #category-list .editing .editMode {
      display: inline; /* Shows input text box when .editing*/
    }    
  </style>  
  
  <section id="categoryapp">
    <header id="header">
      <h1>Categories</h1>
      <input class="newInput" placeholder="Add new category" autofocus>
      <button class="insert">Add New</button>
    </header>
    <section id="main">
      <ul id="category-list"></ul>
    </section>
  </section>
  <div>
    <p>Find the tutorial and code in <a href="http://adrianmejia.com/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/">here</a></p>
  </div>  

  <!-- Templates -->
<script type="text/template" id="category-template">
    <div class="view">
        <div class="viewMode">
            <button class="edit">edit</button>
            <button class="delete" onclick="return confirm('Are you sure you want to delete this?')">delete</button>
            <label><%- name %></label>
        </div>
        <div class="editMode">
            <input class="input" value="<%- name %>">
            <button class="save">save</button>
            <button class="cancel">cancel</button>
        </div>
    </div>
</script>  

{% endblock %}


{% block customJS %}
  <script type="text/javascript">
    'use strict';

    var app = {}; // create namespace for our app
    
    //--------------
    // Models
    //--------------
    app.Category = Backbone.Model.extend({
      urlRoot: '{{ webRoot }}api/category',
      defaults: {
        name: '',
        auction_group_id: 1
      }
    });

    //--------------
    // Collections
    //--------------
    app.CategoryList = Backbone.Collection.extend({
      model: app.Category,
      url: '{{ webRoot }}api/category',
    });

    // instance of the Collection
    app.categoryList = new app.CategoryList();

    //--------------
    // Views
    //--------------
    
    // renders individual category items list (li)
    app.CategoryView = Backbone.View.extend({
      tagName: 'li',
      template: _.template($('#category-template').html()),
      render: function(){
        this.$el.html(this.template(this.model.toJSON()));
        this.input = this.$('.input');
        return this; // enable chained calls
      },
      initialize: function(){
        this.model.on('change', this.render, this);
        this.model.on('destroy', this.remove, this); // remove: Convenience Backbone's function for removing the view from the DOM.
      },      
      events: {
        'click .edit' : 'edit',
        'click .cancel' : 'cancel',
        'click .delete': 'delete',
        'keypress .input' : 'updateOnEnter',
        'click .save' : 'save',
      },
      edit: function(){
        this.$el.addClass('editing');
        this.input.focus();
      },
      save: function(){
        var value = this.input.val().trim();
        if(value) {
          this.model.save({name: value});
        }
        this.cancel();
      },
      cancel: function() {
        this.$el.removeClass('editing');
      },
      delete: function(){
        this.model.destroy();
      },
      updateOnEnter: function(e){ //check for hitting enter
          if(e.which == 13){
            this.save();
          }
        },
    });

    // renders the full list of category items calling CategoryView for each one.
    app.AppView = Backbone.View.extend({
      el: '#categoryapp',
      initialize: function () {
        this.newInput = this.$('.newInput');
        this.addNew = this.$('.insert');
        app.categoryList.on('add', this.addAll, this);
        app.categoryList.on('reset', this.addAll, this);
        app.categoryList.fetch(); // Loads list from local storage
      },
      events: {
        'keypress .newInput': 'createCategoryOnEnter',
        'click .insert': 'insert'
      },
      createCategoryOnEnter: function(e){
        if ( e.which !== 13 || !this.newInput.val().trim() ) { // ENTER_KEY = 13
          return;
        }
        this.insert();
      },
      insert: function() {
          if(this.newInput.val().trim()) {
              app.categoryList.create(this.newAttributes());
          }
          this.newInput.val('');
      },
      addOne: function(category){
        var view = new app.CategoryView({model: category});
        $('#category-list').append(view.render().el);
      },
      addAll: function(){
        this.$('#category-list').html(''); // clean the category list
        // filter category item list
        switch(window.filter){
          default:
            app.categoryList.each(this.addOne, this);
            break;
        }
      },
      newAttributes: function(){
        return {
          name: this.newInput.val().trim()
        }
      }
    });

    //--------------
    // Routers
    //--------------
    
    app.Router = Backbone.Router.extend({
      routes: {
        '*filter' : 'setFilter'
      },
      setFilter: function(params) {
        console.log('app.router.params = ' + params);
        app.categoryList.trigger('reset');
      }
    });     

    //--------------
    // Initializers
    //--------------   

    app.router = new app.Router();
    Backbone.history.start();    
    app.appView = new app.AppView(); 

  </script>
{% endblock %}