var bbsCurrentDate = new Date();
var bbsCurrentMonth = bbsCurrentDate.getMonth() + 1; //Months are zero based
var bbsDateFormat = bbsCurrentMonth + '/' + bbsCurrentDate.getDate() + '/' + bbsCurrentDate.getFullYear();

$.bbscaffoldModelDefs = {
    contact: {
        label: 'Contacts',
        comparator: 'first_name',
        columns: {
            first_name: {},
            middle_name: {},
            last_name: {},
            bidder_number: {
                label: 'bidder number',
                listDisplayView: 'modelColumnHasManyModelToString',
                editDisplayView: 'none',
                relatedModelKey: 'bidder'
            },
            spouse_name: {},
            drivers_license: {},
            organization_name: {},
            affiliation_id: {
                label: 'affiliation',
                listDisplayView: 'modelColumnLookup',
                editDisplayView: 'modelEditColumnCollectionDropdown',
                emptyOption: 'Choose One...',
                relatedModelName: 'affiliation'
            },
            auction_group_id: {
                listDisplayView: 'none',
                editDisplayView: 'modelEditColumnHidden',
                defaultValue: '{{ auctionGroupId }}'
            },
            email: {},
            phone: {},
            street1: {},
            street2: {},
            city: {},
            state: {},
            zip: {},
            notes: {
                editDisplayTemplate: 'modelEditColumnTextArea'
            },
            donations: {
                label: 'contact donations',
                listDisplayView: 'modelColumnManyToManyModelToString',
                listManyToManyModelName: 'item',
                editDisplayView: 'modelEditHasManyDeleteInsert',
                relatedModelKey: 'item_contact',
                linkedModelKey: 'item'
            }
        },
        modelToString: function(model, modelDef, scaffold) {
            return model.get('first_name') + ' ' + model.get('last_name');
        },
        relatedModels: {
            item_contact: {
                joinColumn: 'id',
                relatedJoinColumn: 'contact_id',
                relatedModelName: 'item_contact'
            },
            affiliation: {
                joinColumn: 'affiliation_id',
                relatedJoinColumn: 'id',
                relatedModelName: 'affiliation'
            },
            bidder: {
                joinColumn: 'id',
                relatedJoinColumn: 'contact_id',
                relatedModelName: 'bidder'
            }
        }
    },
    bidder: {
        label: 'Bidder',
        columns: {
            bidder_number: {},
            auction_id: {
                listDisplayView: 'none',
                editDisplayView: 'modelEditColumnHidden',
                defaultValue: '{{ auctionId }}'
            },
            contact_id: {
                label: 'contact name',
                listDisplayView: 'modelColumnLookup',
                editDisplayView: 'modelEditColumnCollectionDropdown',
                emptyOption: 'Choose One...',
                relatedModelName: 'contact'
            }
        },
        modelToString: function(model, modelDef, scaffold) {
            var contactModelDef = scaffold.modelDefs.contact;
            var contactModel = contactModelDef.backboneCollection.findWhere({id: model.get('contact_id')});
            return '#' + model.get('bidder_number')
                + ' - ' + contactModelDef.modelToString(contactModel, contactModelDef, scaffold);
        },
        relatedModels: {
            contact: {
                joinColumn: 'contact_id',
                relatedJoinColumn: 'id',
                relatedModelName: 'contact'
            },
            purchase: {
                joinColumn: 'id',
                relatedJoinColumn: 'bidder_id',
                relatedModelName: 'purchase'
            },
            payment: {
                joinColumn: 'id',
                relatedJoinColumn: 'bidder_id',
                relatedModelName: 'payment'
            }
        }
    },
    item: {
        label: 'Items',
        modelToString: function(model, modelDef, scaffold) {
            if(model.get('item_order_number') != null) {
                return '#' + model.get('item_order_number') + ' - ' + model.get('title');
            }
            else {
                return model.get('title');
            }
        },
        comparator: 'title',
        columns: {
            auction_id: {
                listDisplayView: 'none',
                editDisplayView: 'modelEditColumnHidden',
                defaultValue: '{{ auctionId }}'
            },
            title: {required: true},
            item_order_number: {},
            donor_display_name: {required: true},
            item_contacts: {
                label: 'donor contact(s)',
                listDisplayView: 'modelColumnManyToManyModelToString',
                listManyToManyModelName: 'contact',
                editDisplayView: 'modelEditHasManyDeleteInsert',
                relatedModelKey: 'item_contact',
                linkedModelKey: 'contact'
            },
            description: {
                editDisplayTemplate: 'modelEditColumnTextArea'
            },
            category_id: {
                label: 'category',
                listDisplayView: 'modelColumnLookup',
                editDisplayView: 'modelEditColumnCollectionDropdown',
                emptyOption: 'Choose One...',
                relatedModelName: 'category'
            },
            additional_information: {
                editDisplayTemplate: 'modelEditColumnTextArea'
            },
            date_received: {},
            item_location: {},
            donor_committee_contact: {},
            value: {},
            min_bid: {},
            notes: {
                editDisplayTemplate: 'modelEditColumnTextArea'
            },
            donor_thanked_by: {},
            image_url: {},
            auction_block_id: {
                label: 'auction block',
                listDisplayView: 'modelColumnLookup',
                editDisplayView: 'modelEditColumnCollectionDropdown',
                emptyOption: 'Choose One...',
                relatedModelName: 'auction_block'
            },
            featured_item: {
                editDisplayView: 'modelEditColumnDropdown',
                options: [{value: 'no', display: 'no'},{value: 'yes', display: 'yes'}]
            },
            public_display_item: {
                editDisplayView: 'modelEditColumnDropdown',
                options: [{value: 'no', display: 'no'},{value: 'yes', display: 'yes'}]
            }
        },
        relatedModels: {
            item_contact: {
                joinColumn: 'id',
                relatedJoinColumn: 'item_id',
                relatedModelName: 'item_contact'
            },
            category: {
                joinColumn: 'category_id',
                relatedJoinColumn: 'id',
                relatedModelName: 'category'
            },
            auction_block: {
                joinColumn: 'auction_block_id',
                relatedJoinColumn: 'id',
                relatedModelName: 'auction_block'
            }
        }
    },
    auction_block: {
        label: 'Auction Blocks',
        columns: {
            name: {required: true},
            auction_id: {
                listDisplayView: 'none',
                editDisplayView: 'modelEditColumnHidden',
                defaultValue: '{{ auctionId }}'
            },
            start_time: {},
            end_time: {},
            name: {},
            auction_block_order: {},
        },
        comparator: 'auction_block_order',
        modelToString: function(model, modelDef, scaffold) {
            return model.get('name');
        }
    },
    item_contact: {
        label: 'Donors',
        showInMenu: false,
        modelToString: function(model, modelDef, scaffold) {
            var contactModelDef = scaffold.modelDefs.contact;
            var contactModel = contactModelDef.backboneCollection.findWhere({id: model.get('contact_id')});
            var itemModelDef = scaffold.modelDefs.item;
            var itemModel = itemModelDef.backboneCollection.findWhere({id: model.get('item_id')});
            return contactModelDef.modelToString(contactModel, contactModelDef, scaffold) 
                + ' - ' + itemModelDef.modelToString(itemModel, itemModelDef, scaffold);
        },
        columns: {
            contact_id: {
                label: 'contact',
                listDisplayView: 'modelColumnLookup',
                editDisplayView: 'modelEditColumnCollectionDropdown',
                emptyOption: 'Choose One...',
                relatedModelName: 'contact',
                required: true,
            },
            item_id: {
                label: 'item',
                listDisplayView: 'modelColumnLookup',
                editDisplayView: 'modelEditColumnCollectionDropdown',
                emptyOption: 'Choose One...',
                relatedModelName: 'item',
                required: true,
            }
        },
        relatedModels: {
            contact: {
                joinColumn: 'contact_id',
                relatedJoinColumn: 'id',
                relatedModelName: 'contact'
            },
            item: {
                joinColumn: 'item_id',
                relatedJoinColumn: 'id',
                relatedModelName: 'item'
            }
        }
    },
    purchase: {
        label: 'Winning Bids/Purchases',
        showInMenu: true,
        modelToString: function(model, modelDef, scaffold) {
            var bidderModelDef = scaffold.modelDefs.bidder;
            var bidderModel = bidderModelDef.backboneCollection.findWhere({id: model.get('bidder_id')});
            var itemModelDef = scaffold.modelDefs.item;
            var itemModel = itemModelDef.backboneCollection.findWhere({id: model.get('item_id')});
            return bidderModelDef.modelToString(blockModel, blockModelDef, scaffold) 
                + ' - ' + itemModelDef.modelToString(itemModel, itemModelDef, scaffold)
                + ' - $' + model.get('amount');
        },
        comparator: 'id',
        columns: {
            bidder_id: {
                label: 'bidder',
                listDisplayView: 'modelColumnLookup',
                editDisplayView: 'modelEditColumnCollectionDropdown',
                emptyOption: 'Choose One...',
                relatedModelName: 'bidder'
            },
            item_id: {
                label: 'item',
                listDisplayView: 'modelColumnLookup',
                editDisplayView: 'modelEditColumnCollectionDropdown',
                emptyOption: 'Choose One...',
                relatedModelName: 'item'
            },
            amount: {required: true},
            notes: {
                editDisplayTemplate: 'modelEditColumnTextArea'
            }
        },
        relatedModels: {
            bidder: {
                joinColumn: 'bidder',
                relatedJoinColumn: 'id',
                relatedModelName: 'bidder'
            },
            item: {
                joinColumn: 'item_id',
                relatedJoinColumn: 'id',
                relatedModelName: 'item'
            }
        }
    },
    payment: {
        label: 'Payments',
        showInMenu: true,
        modelToString: function(model, modelDef, scaffold) {
            var bidderModelDef = scaffold.modelDefs.bidder;
            var bidderModel = bidderModelDef.backboneCollection.findWhere({id: model.get('bidder_id')});
            return bidderModelDef.modelToString(blockModel, blockModelDef, scaffold) 
                + ' - $' + model.get('amount')
                + ' (' + model.get('payment_type') + ')';
        },
        comparator: 'id',
        columns: {
            bidder_id: {
                label: 'bidder',
                required: true,
                listDisplayView: 'modelColumnLookup',
                editDisplayView: 'modelEditColumnHidden',
                relatedModelName: 'bidder'
            },
            payment_type: {
                required: true,
                editDisplayView: 'modelEditColumnDropdown',
                options: [{value: 'credit card', display: 'credit card'},{value: 'cash', display: 'cash'},{value: 'check', display: 'check'}]
            },
            amount: {required: true},
            payment_date: {
                defaultValue: bbsDateFormat
            },
            notes: {
                editDisplayTemplate: 'modelEditColumnTextArea'
            }
        },
        relatedModels: {
            bidder: {
                joinColumn: 'bidder',
                relatedJoinColumn: 'id',
                relatedModelName: 'bidder'
            },
        }
    },
    category: {
        label: 'Categories',
        columns: {
            name: {required: true},
            auction_group_id: {
                listDisplayView: 'none',
                editDisplayView: 'modelEditColumnHidden',
                defaultValue: '{{ auctionGroupId }}'
            }
        },
        modelToString: function(model, modelDef, scaffold) {
            return model.get('name');
        }
    },
    affiliation: {
        label: 'Affiliations',
        columns: {
            name: {required: true},
            auction_group_id: {
                listDisplayView: 'none',
                editDisplayView: 'modelEditColumnHidden',
                defaultValue: '{{ auctionGroupId }}'
            },
            contact_id: {
                label: 'affiliation contact',
                listDisplayView: 'modelColumnLookup',
                editDisplayView: 'modelEditColumnCollectionDropdown',
                emptyOption: 'Choose One...',
                relatedModelName: 'contact'
            },
        },
        modelToString: function(model, modelDef, scaffold) {
            return model.get('name');
        },
        relatedModels: {
            contact: {
                joinColumn: 'contact_id',
                relatedJoinColumn: 'id',
                relatedModelName: 'contact'
            }
        }
    }
};