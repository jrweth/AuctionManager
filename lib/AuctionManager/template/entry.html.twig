{% extends "layout.html.twig" %}

{% block content %}{% endblock %}

{% block customJS %}
<script type="text/javascript">
    var init = {
        options: {
            debug: true,
            apiRoot: '{{ webRoot}}api/',
            modelInitOrder: ['category', 'contact', 'item', 'item_contact']
        },
        templates: {
          scaffold: '<div class="bbs-scaffold"> \
                  <ul class="bbs-modelMenu nav navbar-nav" style="display: none"></ul></div> \
              <div class="bbs-models" style="clear:both"    ></div> \
           </div>',
          modelListTableActions: '<td><button class="bbs-edit btn">edit</button></td> \
            <td><button class="bbs-delete btn">delete</button> \
         </td>',
         model: '<div class="bbs-model bbs-model-<%- name %>" style="display: none"> \
            <h1 class="bbs-modelHeader"><%- label %></h1> \
            <div class="bbs-modelSubSections"> \
               <div class="bbs-modelList bbs-modelSubSection"> \
                  <div class="bbs-modelAddNew" style="margin-bottom: 10px"> \
                     <button class="bbs-addNew btn btn-primary">add new</button> \
                  </div> \
               </div> \
               <div class="bbs-modelEdit bbs-modelSubSection"></div> \
               <div class="bbs-modelDetail bbs-modelSubSection"></div> \
            </div> \
         </div>',
         modelListTable: '<table class="bbs-modelListTable table table-striped"><thead><th width="50px">&#160</th><th width="50px">&#160</th> \
            <% for(columnName in columns) { if (columns[columnName].listDisplayView != "none") { %> \
            <th><%- columns[columnName].label %></th> \
         <% }} %> \
         </thead><tbody></tbody></table>',
         modelEditActions: '<div class="bbs-editActions" style="margin-top: 20px"> \
            <button class="bbs-save btn btn-primary">save</button> \
            <button class="bbs-cancel btn">cancel</button> \
         </div>',
         modelEditRemoveRelated: '<a class="bbs-delete btn btn-mini" style="cursor: pointer">remove</a>',
         modelEditAddRelated: '<a class="bbs-addRelated btn btn-mini" style="cursor: pointer">add</a>'
        },
        modelDefs: {
            contact: {
                label: 'Contacts',
                comparator: 'first_name',
                columns: {
                    first_name: {},
                    middle_name: {},
                    last_name: {},
                    spouse_name: {},
                    drivers_license: {},
                    organization_name: {},
                    affiliation_id: {
                        label: 'affiliation',
                        listDisplayView: 'modelColumnLookup',
                        editDisplayView: 'modelEditColumnCollectionDropdown',
                        emptyOption: 'Choose One...',
                        relatedModelName: 'affiliation'
                    },
                    auction_group_id: {
                        listDisplayView: 'none',
                        editDisplayView: 'modelEditColumnHidden',
                        defaultValue: '{{ auctionGroupId }}'
                    },
                    email: {},
                    phone: {},
                    street1: {},
                    street2: {},
                    city: {},
                    state: {},
                    zip: {},
                    notes: {
                        editDisplayTemplate: 'modelEditColumnTextArea'
                    },
                    donations: {
                        label: 'contact donations',
                        listDisplayView: 'modelColumnManyToManyModelToString',
                        listManyToManyModelName: 'item',
                        editDisplayView: 'modelEditHasManyDeleteInsert',
                        relatedModelKey: 'item_contact',
                        linkedModelKey: 'item'
                    }
                },
                modelToString: function(model, modelDef, scaffold) {
                    return model.get('first_name') + ' ' + model.get('last_name');
                },
                relatedModels: {
                    item_contact: {
                        joinColumn: 'id',
                        relatedJoinColumn: 'contact_id',
                        relatedModelName: 'item_contact'
                    },
                    affiliation: {
                        joinColumn: 'affiliation_id',
                        relatedJoinColumn: 'id',
                        relatedModelName: 'affiliation'
                    }
                }
            },
            item: {
                label: 'Items',
                modelToString: function(model, modelDef, scaffold) {
                    return model.get('title');
                },
                columns: {
                    auction_id: {
                        listDisplayView: 'none',
                        editDisplayView: 'modelEditColumnHidden',
                        defaultValue: '{{ auctionId }}'
                    },
                    title: {},
                    donor_display_name: {},
                    description: {
                        editDisplayTemplate: 'modelEditColumnTextArea'
                    },
                    category_id: {
                        label: 'category',
                        listDisplayView: 'modelColumnLookup',
                        editDisplayView: 'modelEditColumnCollectionDropdown',
                        emptyOption: 'Choose One...',
                        relatedModelName: 'category'
                    },
                    additional_information: {
                        editDisplayTemplate: 'modelEditColumnTextArea'
                    },
                    date_received: {},
                    item_location: {},
                    donor_committee_contact: {},
                    value: {},
                    min_bid: {},
                    notes: {
                        editDisplayTemplate: 'modelEditColumnTextArea'
                    },
                    donor_thanked_by: {},
                    image_url: {},
                    item_contacts: {
                        label: 'donor contact(s)',
                        listDisplayView: 'modelColumnManyToManyModelToString',
                        listManyToManyModelName: 'contact',
                        editDisplayView: 'modelEditHasManyDeleteInsert',
                        relatedModelKey: 'item_contact',
                        linkedModelKey: 'contact'
                    },
                    auction_blocks: {
                        label: 'auction block(s)',
                        listDisplayView: 'modelColumnManyToManyModelToString',
                        listManyToManyModelName: 'auction_block',
                        editDisplayView: 'modelEditHasManyDeleteInsert',
                        relatedModelKey: 'auction_block_item',
                        linkedModelKey: 'auction_block'
                    }
                },
                relatedModels: {
                    item_contact: {
                        joinColumn: 'id',
                        relatedJoinColumn: 'item_id',
                        relatedModelName: 'item_contact'
                    },
                    category: {
                        joinColumn: 'category_id',
                        relatedJoinColumn: 'id',
                        relatedModelName: 'category'
                    },
                    auction_block_item: {
                        joinColumn: 'id',
                        relatedJoinColumn: 'item_id',
                        relatedModelName: 'auction_block_item'
                    }
                }
            },
            auction_block: {
                label: 'Auction Blocks',
                columns: {
                    name: {},
                    auction_id: {
                        listDisplayView: 'none',
                        editDisplayView: 'modelEditColumnHidden',
                        defaultValue: '{{ auctionId }}'
                    },
                    start_time: {},
                    end_time: {},
                    name: {},
                    auction_block_order: {},
                    block_items: {
                        label: 'items',
                        listDisplayView: 'modelColumnManyToManyModelToString',
                        listManyToManyModelName: 'item',
                        editDisplayView: 'modelEditHasManyDeleteInsertOrder',
                        relatedModelKey: 'auction_block_item',
                        linkedModelKey: 'item'
                    }
                },
                comparator: 'auction_block_order',
                modelToString: function(model, modelDef, scaffold) {
                    return model.get('name');
                },
                relatedModels: {
                    auction_block_item: {
                        joinColumn: 'id',
                        relatedJoinColumn: 'auction_block_id',
                        relatedModelName: 'auction_block_item'
                    }
                }
            },
            item_contact: {
                label: 'Donors',
                showInMenu: false,
                modelToString: function(model, modelDef, scaffold) {
                    var contactModelDef = scaffold.modelDefs.contact;
                    var contactModel = contactModelDef.backboneCollection.findWhere({id: model.get('contact_id')});
                    var itemModelDef = scaffold.modelDefs.item;
                    var itemModel = itemModelDef.backboneCollection.findWhere({id: model.get('item_id')});
                    return contactModelDef.modelToString(contactModel, contactModelDef, scaffold) 
                        + ' - ' + itemModelDef.modelToString(itemModel, itemModelDef, scaffold);
                },
                columns: {
                    contact_id: {
                        label: 'contact',
                        listDisplayView: 'modelColumnLookup',
                        editDisplayView: 'modelEditColumnCollectionDropdown',
                        emptyOption: 'Choose One...',
                        relatedModelName: 'contact'
                    },
                    item_id: {
                        label: 'item',
                        listDisplayView: 'modelColumnLookup',
                        editDisplayView: 'modelEditColumnCollectionDropdown',
                        emptyOption: 'Choose One...',
                        relatedModelName: 'item'
                    }
                },
                relatedModels: {
                    contact: {
                        joinColumn: 'contact_id',
                        relatedJoinColumn: 'id',
                        relatedModelName: 'contact'
                    },
                    item: {
                        joinColumn: 'item_id',
                        relatedJoinColumn: 'id',
                        relatedModelName: 'item'
                    }
                }
            },
            auction_block_item: {
                label: 'Auction Block Items',
                showInMenu: false,
                modelToString: function(model, modelDef, scaffold) {
                    var blockModelDef = scaffold.modelDefs.auction_block;
                    var blockModel = blockModelDef.backboneCollection.findWhere({id: model.get('auction_block_id')});
                    var itemModelDef = scaffold.modelDefs.item;
                    var itemModel = itemModelDef.backboneCollection.findWhere({id: model.get('item_id')});
                    return model.get('item_order') + '. ' + blockModelDef.modelToString(blockModel, blockModelDef, scaffold) 
                        + ' - ' + itemModelDef.modelToString(itemModel, itemModelDef, scaffold);
                },
                comparator: 'item_order',
                columns: {
                    auction_block_id: {
                        label: 'auction block',
                        listDisplayView: 'modelColumnLookup',
                        editDisplayView: 'modelEditColumnCollectionDropdown',
                        emptyOption: 'Choose One...',
                        relatedModelName: 'auction_block'
                    },
                    item_id: {
                        label: 'item',
                        listDisplayView: 'modelColumnLookup',
                        editDisplayView: 'modelEditColumnCollectionDropdown',
                        emptyOption: 'Choose One...',
                        relatedModelName: 'item'
                    },
                    item_order: {
                        defaultValue: 0,
                        editDisplayView: 'modelEditColumnHidden',
                    }
                },
                relatedModels: {
                    auction_block: {
                        joinColumn: 'auction_block_id',
                        relatedJoinColumn: 'id',
                        relatedModelName: 'auction_block'
                    },
                    item: {
                        joinColumn: 'item_id',
                        relatedJoinColumn: 'id',
                        relatedModelName: 'item'
                    }
                }
            },
            category: {
                label: 'Categories',
                columns: {
                    name: {},
                    auction_group_id: {
                        listDisplayView: 'none',
                        editDisplayView: 'modelEditColumnHidden',
                        defaultValue: '{{ auctionGroupId }}'
                    }
                },
                modelToString: function(model, modelDef, scaffold) {
                    return model.get('name');
                }
            },
            affiliation: {
                label: 'Affiliations',
                columns: {
                    name: {},
                    auction_group_id: {
                        listDisplayView: 'none',
                        editDisplayView: 'modelEditColumnHidden',
                        defaultValue: '{{ auctionGroupId }}'
                    },
                    contact_id: {
                        label: 'affiliation contact',
                        listDisplayView: 'modelColumnLookup',
                        editDisplayView: 'modelEditColumnCollectionDropdown',
                        emptyOption: 'Choose One...',
                        relatedModelName: 'contact'
                    },
                },
                modelToString: function(model, modelDef, scaffold) {
                    return model.get('name');
                },
                relatedModels: {
                    contact: {
                        joinColumn: 'contact_id',
                        relatedJoinColumn: 'id',
                        relatedModelName: 'contact'
                    }
                }
            }
        }
    };
    $.extend( true, $.fn.DataTable.TableTools.classes, {
        "container": "btn-group",
        "buttons": {
            "normal": "btn",
            "disabled": "btn disabled"
        }
    });
    $.bbscaffold = new BackboneScaffold(init);
    $.bbscaffold.views.modelView = BackboneScaffold.prototype.defaults.views.modelView.extend({
        addAll: function() {
            //initiate the data table
            
            $table = this.$el.find('.bbs-modelListTable');
            $table.dataTable().fnDestroy();
            
            this.scaffold.debugLog('Adding All rows for model ' + this.modelName);
            this.$el.find('.bbs-modelListTable tbody').html(''); // clean the list
            this.collection.each(this.addOne, this);

            $table.dataTable({
                "sDom": "<'row'<'span4'<'row'<'span12'f>><'row'<'span12' i l>>><'span6'rT>><'row'<'span12't>>",
                "bScrollCollapse": true,
                "bPaginate": false,
                "bStateSave": false,
                "oTableTools": {
                    "sSwfPath": "{{ webRoot }}TableTools/swf/copy_csv_xls_pdf.swf",
                    "aButtons": ["copy", "csv", "pdf"]
                },
                "aaSorting": [[ 2, "asc" ]],
                "aoColumnDefs": [
                {
                    bSortable: false,
                    aTargets: [ 0, 1 ]
                 }
               ]
            });
        },
    });
    
    
    $.bbscaffold.setupScaffold('#content');
</script>
{% endblock %}