{% extends "layout.html.twig" %}

{% block content %}
<style>
    .bbs-modelHeader { display: none}
    td ul {list-style-type: none}
    .paymentTable th, .paymentTable td, .purchasesTable th, .purchasesTable td { padding: 5px;}
    .paymentReceiptTable th:first-child { display: none; background-color: purple}
    .paymentReceiptTable td:first-child { display: none; background-color: purple}
    .purchaseReceiptTable th:first-child { display: none; background-color: purple}
    .purchaseReceiptTable td:first-child { display: none; background-color: purple}

</style>
<h1 class="no-print">Checkout</h1>
<ul class="nav nav-tabs no-print" id="stepTabs">
  <li id="stepTab1" class="active"><a data-target="#step1" >Step 1 - Find Bidder</a></li>
  <li id="stepTab2"><a data-target="#step2" >Step 2 - Confirm Purchases/Add Payments</a></li>
  <li id="stepTab3"><a data-target="#step3" >Step 3 - Print Receipt</a></li>
</ul>
<div class="tab-content">
  <div class="tab-pane active" id="step1">
    <div style="margin-bottom: 20px">
        If the person has not yet registered and has no bidder number you need to first register: <a href="{{ webRoot }}register#/model/contact" class="bbs-addNew btn btn-primary">register</a>
    </div>
  </div>
  <div class="tab-pane" id="step2">
      <div>
          <h1><div class="bidderName">Bidder</div>
          <a class="btn btn-primary" onclick="
              $('#stepTab1, #step1, #stepTab2, #step2').removeClass('active');
              $('#stepTab3, #step3').addClass('active');
              $('#scaffold-content').hide(); window.print();">print receipt</a>
              </h1>
      </div>
      <div><h3>Balance Due: <span class="bidderBalance"></span></h3></div>
      <div class="row">
          <div class="span4">
          <h2>Payments</h2>
          <table class="paymentTable table-striped dataTable">
              <thead><tr><th>&#160;</th><th>date</th><th>type</th><th>notes</th><th>amount</th></tr></thead>
              <tbody></tbody>
              <tfoot><tr><th colspan="3">&#160;</th><th>Total</th><th class="paymentTotal">0</th></tr></tfoot>
          </table>
          <button class="btn-primary btn addPayment">Add Payment</button>
          </div>
          <div class="span8">
              <h2>Purchases</h2>
              <table class="purchasesTable table-striped dataTable">
                  <thead><th>&#160;</th><th>item</th><th>valued at</th><th>amount</th></thead>
                  <tbody></tbody>
                  <tfoot>
                      <tr><th>&#160;</th><th>&#160</th><th>Total</th><th class="purchaseTotal">0</th></tr>
                  </tfoot>
              </table>
              <a class="btn btn-primary addPurchase">Add Additional Purchase</a>
              <div id="addItem" style="display: none">
                  <div>
                  <select><option value="">choose item..</option></select>
                  </div>
                  <button class="addItem btn">Add Item</button> 
                  <a onclick="$('#addItem').hide()">cancel</a>
              </div>
          </div>
      </div>
  </div>
  <div class="tab-pane" id="step3">
      <h1 class="bidderName"></h1>
      Thank you for attending the Philadelphia Festival & Auction Benefiting MCC Locally & Globally.
      The Philadelphia Festival is part of the PA Relief Sale. We hope you had fun.
      Please tell others about the event and come back next year.
      Details about next year’s festival will be available on our website at MCCPhillyFestival.org.
     <br /><br />
     Here is a receipt for your purchases.
    <br />
    Part of the PA Relief Sale
      <h2>Purchases</h2>
      <table class="purchasesTable table-striped purchaseReceiptTable dataTable">
          <thead><th>&#160;</th><th>item</th><th>amount</th></thead>
          <tbody></tbody>
          <tfoot>
              <tr><th>&#160</th><th>Total</th><th class="purchaseTotal">0</th></tr>
      </table>
      <h2>Payments</h2>
      <table class="paymentTable table-striped paymentReceiptTable dataTable">
          <thead><tr><th>&#160;</th><th>date</th><th>type</th><th>notes</th><th>amount</th></tr></thead>
          <tbody></tbody>
          <tfoot><tr><th>&#160</th><th colspan="2">&#160;</th><th>Total</th><th class="paymentTotal">0</th></tr></tfoot>
      </table>
  </div>
</div>

      <div id="scaffold-content"></div>


<div id="bidder-number-report">
<h1 id="bidder-name"></span>
<h1 id="bidder-number"></span>
</div>

{% endblock %}

{% block customJS %}
<script src="{{ webroot }}modelDefs.js" type="text/javascript"></script>
<script src="{{ webroot }}js/backbone-scaffold.bootstrapDataTables.js" type="text/javascript"></script>

<script type="text/javascript">

var init = {
        options: {
            debug: true,
            apiRoot: '{{ webRoot}}api/',
            modelInitOrder: ['category', 'contact', 'item', 'item_contact']
        },
        templates: _.extend($.bbscaffoldBootstrapDataTablesTemplates, {
          modelListTableActions: '<td><button class="bbs-edit btn">select</button></td><td>&nbsp;</td>'
        }),
        modelDefs: $.bbscaffoldModelDefs
    };
    init.modelDefs.purchase.columns.bidder_id.editDisplayView = 'modelEditColumnHidden';
    
    $.extend( true, $.fn.DataTable.TableTools.classes, {
        "container": "btn-group",
        "buttons": {
            "normal": "btn",
            "disabled": "btn disabled"
        }
    });
    $.bbscaffold = new BackboneScaffold(init);
    
    $.bbscaffold.views.modelView = BackboneScaffold.prototype.defaults.views.modelView.extend({
        addAll: function() {
            //initiate the data table
            $table = this.$el.find('.bbs-modelListTable');
            this.$el.find('.bbs-addNew').hide();
            $table.dataTable().fnDestroy();
            
            this.scaffold.debugLog('Adding All rows for model ' + this.modelName);
            this.$el.find('.bbs-modelListTable tbody').html(''); // clean the list
            this.collection.each(this.addOne, this);

            $table.dataTable({
                "sDom": "<'row'<'span6'fil><'span6'r>><'row'<'span12't>>",
                "bScrollCollapse": true,
                "bPaginate": false,
                "bStateSave": false,
                "aaSorting": [[ 4, "asc" ]],
                "aoColumnDefs": [
                {
                    bSortable: false,
                    aTargets: [ 0]
                 }
               ]
            });
        }
    });
    

    $.bbscaffold.purchasesViewType = Backbone.View.extend({
    	initialize: function() {
        	console.log(this.options);
        	this.scaffold = this.options.scaffold;
    	    this.purchaseCollection = this.scaffold.modelDefs.purchase.backboneCollection;
    	    this.paymentCollection = this.scaffold.modelDefs.payment.backboneCollection;
    	    this.itemCollection = this.scaffold.modelDefs.item.backboneCollection;
    	    this.bidder_id = this.options.bidder_id;
    	    this.bidder = this.scaffold.modelDefs.bidder.backboneCollection.get(this.bidder_id);
    	    this.bidderInfo = this.scaffold.modelDefs.bidder.modelToString(this.bidder, this.scaffold.modelDefs.bidder, this.scaffold);
    	    this.$el.find('tbody').html('');
    	    this.render();
			_.bindAll(this, "addPayment", 'deletePayment');

    	},
    	render: function() {
        	$('.bidderName').html('Bidder ' + this.bidderInfo);
        	var purchaseTotal = 0.0;
		    var oddEven = 'even';
		    $('.purchasesTable tbody').html('');
    		for (var i = 0; i < this.purchaseCollection.length; i++) {
    		    var purchase = this.purchaseCollection.at(i);
        		if(purchase.get('bidder_id') == this.bidder_id) {
            		if( oddEven == 'even') {oddEven = 'odd';} else {oddEven = 'even';}
        		    var item = this.itemCollection.get(purchase.get('item_id'));
        		    var orderNumber = item.get('item_order_number');
        		    if (orderNumber == null) orderNumber = '';
	    	        $('.purchasesTable tbody').append('<tr class="' + oddEven + '"> \
	    	    	        <td><a class="deletePurchase btn btn_small" data-purchase_id="' + purchase.get('id') +'">delete</a></td> \
	    	    	        <td>#' + orderNumber + ' - ' + item.get('title') + '</td> \
	    	    	        <td>$' + purchase.get('amount') + '</td></tr>');
	    	        purchaseTotal = purchaseTotal + parseFloat(purchase.get('amount'), 10);
        		}
			}
			$('.purchaseTotal').html('$' + purchaseTotal);

			var paymentTotal = 0.0;
			var notes;
		    $('.paymentTable tbody').html('');
    		for (var i = 0; i < this.paymentCollection.length; i++) {
    		    var payment = this.paymentCollection.at(i);
        		if(payment.get('bidder_id') == this.bidder_id) {
            		if( oddEven == 'even') {oddEven = 'odd';} else {oddEven = 'even';}
            		notes = payment.get('notes');
            		if (notes == null) notes = '[none]';
	    	        $('.paymentTable tbody').append('<tr class="' + oddEven + '"> \
	    	    	        <td><a class="deletePayment btn btn_small" data-payment_id="' + payment.get('id') +'">delete</a></td> \
	    	    	        <td>' + payment.get('payment_date') + '</td> \
	    	    	        <td>' + payment.get('payment_type') + '</td> \
	    	    	        <td>' + notes  + '</td> \
	    	    	        <td>$' + payment.get('amount') + '</td></tr>');
	    	        paymentTotal = paymentTotal + parseFloat(payment.get('amount'), 10);
        		}
			}
			$('.paymentTotal').html('$' + paymentTotal);
			$('.bidderBalance').html(purchaseTotal - paymentTotal);
        },
    	events: {
    		'click .addPayment' : 'addPayment',
    		'click .addPurchase' : 'addPurchase',
    		'click .deletePayment' : 'deletePayment',
    		'click .deletePurchase' : 'deletePurchase',
    	},
    	addPayment: function() {
    		this.scaffold.debugLog('Add New Payment');
    		$('.addPayment').hide();
    		//setup new model with bidder set as the default bidder_id
    		this.scaffold.modelDefs.payment.backboneModel = Backbone.RelationalModel.extend({
    			urlRoot: this.scaffold.options.apiRoot + '/payment',
    			modelName: 'payment',
    			columns: this.scaffold.modelDefs.payment.columns,
    			defaults: {bidder_id: this.bidder_id, payment_date: bbsCurrentDateFormat}
    		});
    		//navigate to the insert screen
    		this.scaffold.router.insertModel('payment');
    		$('#scaffold-content').show();
    	},
    	addPurchase: function() {
    		this.scaffold.debugLog('Add New Payment');
    		$('.addPayment').hide();
    		//setup new model with bidder set as the default bidder_id
    		this.scaffold.modelDefs.purchase.backboneModel = Backbone.RelationalModel.extend({
    			urlRoot: this.scaffold.options.apiRoot + '/purchase',
    			modelName: 'purchase',
    			columns: this.scaffold.modelDefs.purchase.columns,
    			defaults: {bidder_id: this.bidder_id}
    		});
    		//navigate to the insert screen
    		this.scaffold.router.insertModel('purchase');
    		$('#scaffold-content').show();
    	},
    	deletePayment: function(event) {
    	    if(confirm('Are you certain you want to delete this payment?')) {
        	    var id = $(event.target).attr('data-payment_id');
        	    var payment = this.paymentCollection.get(id);
        	    payment.destroy({
        	        wait: true,
        	        success: function () {$.bbscaffold.purchasesView.render();},
        	        error: function() {alert('There was an error deleting the payment');}
               });
            }
    	    $.bbscaffold.purchasesView.render();
        },
    	deletePurchase: function(event) {
    	    if(confirm('Are you certain you want to delete this purchase?')) {
        	    var id = $(event.target).attr('data-purchase_id');
        	    var purchase = this.purchaseCollection.get(id);
        	    purchase.destroy({
        	        wait: true,
        	        success: function () {$.bbscaffold.purchasesView.render();},
        	        error: function() {alert('There was an error deleting the purchase');}
               });
            }
    	    
        }
    });

    
    $.bbscaffold.views.modelTableRow = BackboneScaffold.prototype.defaults.views.modelTableRow.extend({
        edit: function () {
            $('#stepTab1, #step1').removeClass('active');
            $('#stepTab2, #step2').addClass('active');
        	$('#scaffold-content').hide();
            $.bbscaffold.purchasesView = new $.bbscaffold.purchasesViewType({
                scaffold: this.scaffold,
                bidder_id: this.model.get('id'),
                el: $('#step2')}
            );

            window.scrollTo(0,0);
        }
    });

    $.bbscaffold.views.modelEdit = BackboneScaffold.prototype.defaults.views.modelEdit.extend({
    	saveSuccess: function(model, response) {
        	console.log('rerendering purchases view');
			this.collection.add(model);
			this.undelegateEvents();
            $('.addPayment').show();
        	$('#scaffold-content').hide();
    		$.bbscaffold.purchasesView.render();
    	},
        cancel: function() {
        	//this.undelegateEvents();
        	$('#scaffold-content').hide();
            $('.addPayment').show();
        }
    });
    $.bbscaffold.setupScaffold('#scaffold-content');
    $('.bbs-modelAddNew').hide();
    $.bbscaffold.router.navigate('/model/bidder', {trigger: true});
</script>
{% endblock %}